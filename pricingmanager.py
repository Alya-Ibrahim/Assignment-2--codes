# -*- coding: utf-8 -*-
"""PricingManager.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lPAZ9EDlHEwIZ9Myi7Tfxeg7tKspDFe-
"""

# Import the Ticket class for type hinting and interaction.
from Ticket import Ticket
# Import the Tour class to check if an event is a tour.
from Tour import Tour

# Define the PricingManager class.
class PricingManager:
    # Constructor method with a Ticket object as a parameter.
    def __init__(self, ticket: Ticket):
        self.ticket = ticket  # Store the passed Ticket object for further operations.

    # Method to calculate the final ticket price after discounts and taxes.
    def countTicketPrice(self):
        discounted_price = self.applyDiscount()  # Calculate the price after any discounts.
        taxed_price = self.applyTax(discounted_price)  # Apply tax to the discounted price.
        return taxed_price  # Return the final ticket price after applying discounts and taxes.

    # Method to determine the category of the visitor based on their age and status.
    def getVisitorCategory(self):
        age = self.ticket.get_visitor().get_age()  # Retrieve the age of the visitor associated with the ticket.
        is_teacher = self.ticket.get_visitor().get_is_teacher()  # Check if the visitor is a teacher.
        is_student = self.ticket.get_visitor().get_is_student()  # Check if the visitor is a student.

        # Determine the visitor category based on age and status.
        if age < 18:
            return "Child"
        elif 18 <= age < 60:
            if is_teacher:
                return "Teacher"
            elif is_student:
                return "Student"
            else:
                return "Adult"
        elif age >= 60:
            return "Senior"
        else:
            return "Unknown"  # Return "Unknown" if the visitor doesn't fit into any category.

    # Method to apply any applicable discounts to the ticket price.
    def applyDiscount(self):
        event_price = self.ticket.get_eventPrice()  # Get the base price of the event from the ticket.
        category = self.getVisitorCategory()  # Determine the category of the visitor.
        is_tour = self.ticket.get_event()  # Retrieve the event associated with the ticket.

        # Apply a 50% discount if the event is a Tour.
        if isinstance(is_tour, Tour):
            return event_price * 0.50
        # Apply a full discount (free ticket) for children, seniors, teachers, and students.
        if category == "Child" or category == "Senior" or category == "Student" or category == "Teacher":
            return 0.0
        else:
            return event_price  # No discount is applied for adults not fitting into the above categories.

    # Method to apply tax to a given price.
    def applyTax(self, price):
        return price * 1.05  # Apply a 5% VAT to the price and return the result.