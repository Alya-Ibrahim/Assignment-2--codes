# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10pxLkV2VlJomMEXBDq87xaX88UjymaBX
"""

import unittest
# Import necessary classes for testing
from Ticket import Ticket, Visitor
from PricingManager import PricingManager
from MuseumLocationType import MuseumLocationType
from Location import Location
from Artifact import Artifact
from Artwork import Artwork
from SpecialEvent import SpecialEvent
from Exhibition import Exhibition
from Tour import Tour

# Define a test class that inherits from unittest.TestCase
class TestMuseum(unittest.TestCase):

    def setUp(self):
        # Set up method to initialize common test objects before each test method is called

        # Creating instances of Artifact and Artwork with specified attributes
        self.artifact1 = Artifact("Ancient Vase", "Unknown", "1000 BC", "Historically significant",
                                  "Greece", "Greek", "Archaeological site", "Good", "Legal", "Authenticated", "Ceramic")

        self.artwork1 = Artwork("Starry Night", "Vincent van Gogh", "1889", "Artistically significant",
                                "Oil on canvas", "Post-Impressionism", 1000000, "Landscape")

        # Creating Location instances representing different parts of the museum
        self.location1 = Location("Gallery 1", MuseumLocationType.PERMANENT_GALLERY)
        self.location2 = Location("Exhibition Hall A", MuseumLocationType.EXHIBITION_HALL)

        # Creating SpecialEvent and Exhibition instances with specified attributes
        self.event1 = SpecialEvent("Art Talk", self.location1, "2 hours", "2024-04-10", "Discussing famous artworks")

        self.items_for_exhibition = [self.artifact1, self.artwork1]
        self.event2 = Exhibition("Modern Art Exhibition", self.location2, "1 week", "2024-05-01",
                                 self.items_for_exhibition, "Modern Art")

        # Creating a Visitor instance
        self.visitor1 = Visitor(1, "John", "Doe", 30)

        # Creating Ticket instances for the visitor for different events
        self.ticket1 = Ticket(1, self.visitor1, 50, 50, self.event1)
        self.ticket2 = Ticket(2, self.visitor1, 100, 100, self.event2)

        # Creating a PricingManager instance for ticket price calculation
        self.pricing_manager = PricingManager(self.ticket1)

    def test_add_new_art_to_museum(self):
        # Test method to verify the creation and attributes of Artifact and Artwork instances
        self.assertEqual(self.artifact1.get_title(), "Ancient Vase")
        self.assertEqual(self.artwork1.get_title(), "Starry Night")

    def test_open_new_exhibition_or_event(self):
        # Test method to verify the creation and attributes of SpecialEvent and Exhibition instances
        self.assertEqual(self.event1.get_name(), "Art Talk")
        self.assertEqual(self.event2.get_name(), "Modern Art Exhibition")
        # Verify the Exhibition instance contains the expected items
        self.assertEqual(len(self.event2.get_items()), 2)

    def test_purchase_tickets(self):
        # Test method to verify ticket creation and the total price to pay attribute
        self.assertEqual(self.ticket1.get_totalPriceToPay(), 50)
        self.assertEqual(self.ticket2.get_totalPriceToPay(), 100)

    def test_display_payment_receipts(self):
        # Test method to simulate the generation and content of a payment receipt
        receipt1 = f"Ticket ID: {self.ticket1.get_id()}, Event: {self.event1.get_name()}, Total Price: {self.pricing_manager.countTicketPrice()}"
        # Verify the receipt content matches the expected output
        self.assertEqual(receipt1, "Ticket ID: 1, Event: Art Talk, Total Price: 52.5")

    def test_tour_discount(self):
        # Test method to verify discount application for a Tour event
        tour_location = Location("Outdoor Tour", MuseumLocationType.OUTDOOR_SPACE)
        tour_event = Tour("Historical Tour", tour_location, "3 hours", "2024-04-15", "Tour Guide", 20)
        tour_ticket = Ticket(3, self.visitor1, 200, 200, tour_event)

        tour_pricing_manager = PricingManager(tour_ticket)
        # Verify that the discounted and taxed price matches the expected value
        self.assertEqual(tour_pricing_manager.countTicketPrice(), 105)

    def test_set_visitor_category(self):
        # Test method to verify the dynamic determination of visitor category based on age and student status
        self.assertEqual(self.pricing_manager.getVisitorCategory(), "Adult")
        self.visitor1.set_age(16)  # Change the age to simulate a child visitor
        self.assertEqual(self.pricing_manager.getVisitorCategory(), "Child")
        self.visitor1.set_age(30)  # Reset age
        self.visitor1.set_is_student(True)  # Simulate a student visitor
        self.assertEqual(self.pricing_manager.getVisitorCategory(), "Student")

    def test_capacity_limit_for_tour(self):
        # Test method to verify enforcement of capacity limits for tours
        # Expect ValueError when capacity is below the minimum
        with self.assertRaises(ValueError):
            Tour("Historical Tour", self.location1, "3 hours", "2024-04-15", "Tour Guide", 10)
        # Expect ValueError when capacity is above the maximum
        with self.assertRaises(ValueError):
            Tour("Historical Tour", self.location1, "3 hours", "2024-04-15", "Tour Guide", 45)

# Condition to run the unittest moduleâ€™s command-line interface
if __name__ == '__main__':
    unittest.main()