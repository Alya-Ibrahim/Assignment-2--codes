# -*- coding: utf-8 -*-
"""Ticket.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HAruw8iCK6ifH7AREIU25_rgRobQneJA
"""

# Import the Visitor and Event classes for type hinting.
from Visitor import Visitor
from Event import Event

# Ticket class definition
class Ticket:
    #A constructor of Ticket with parameters for all its attributes.
    def __init__(self, id, visitor: Visitor, totalPriceToPay, eventPrice, event: Event):
        self.id = id  # Set the ticket ID
        self.visitor = visitor  # Set the visitor associated with the ticket
        self.totalPriceToPay = totalPriceToPay  # Set the total price the visitor has to pay
        self.eventPrice = eventPrice  # Set the base price of the event
        # Ensure the event is an instance of Event, otherwise raise a ValueError
        if isinstance(event, Event):
            self.event = event
        else:
            raise ValueError("Invalid event type")

    # Getter method for the ticket ID
    def get_id(self):
        return self.id

    # Setter method for the ticket ID
    def set_id(self, id):
        self.id = id

    # Getter method for the visitor
    def get_visitor(self):
        return self.visitor

    # Setter method for the visitor
    def set_visitor(self, visitor):
        # Ensure the visitor is an instance of Visitor, otherwise raise a ValueError
        if isinstance(visitor, Visitor):
            self.visitor = visitor
        else:
            raise ValueError("Invalid visitor type")

    # Getter method for the total price to pay
    def get_totalPriceToPay(self):
        return self.totalPriceToPay

    # Setter method for the total price to pay
    def set_totalPriceToPay(self, totalPriceToPay):
        self.totalPriceToPay = totalPriceToPay

    # Getter method for the event price
    def get_eventPrice(self):
        return self.eventPrice

    # Setter method for the event price
    def set_eventPrice(self, eventPrice):
        self.eventPrice = eventPrice

    # Getter method for the event
    def get_event(self):
        return self.event

    # Setter method for the event
    def set_event(self, event):
        # Ensure the event is an instance of Event, otherwise raise a ValueError
        if isinstance(event, Event):
            self.event = event
        else:
            raise ValueError("Invalid event type")